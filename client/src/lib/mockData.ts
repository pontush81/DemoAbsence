import { 
  Employee, 
  Schedule, 
  TimeCode, 
  Deviation, 
  LeaveRequest, 
  TimeBalance, 
  Payslip,
  ActivityLog
} from '@shared/schema';

// MOCKED data for development purposes

// Mock Employees
export const mockEmployees: Employee[] = [
  {
    id: 1,
    employeeId: 'E001',
    personnummer: '19850512-1234',
    firstName: 'Anna',
    lastName: 'Andersson',
    careOfAddress: '',
    streetAddress: 'Storgatan 1',
    postalCode: '12345',
    city: 'Stockholm',
    country: 'Sverige',
    phoneNumber: '070-123 45 67',
    email: 'anna.andersson@gmail.com',
    workEmail: 'anna.andersson@kontek.se',
    preferredEmail: 'work',
    status: 'active',
    role: 'employee',
    bankClearingNumber: '1234',
    bankAccountNumber: '123456789',
    bankBIC: '',
    bankCountryCode: 'SE',
    bankIBAN: '',
    department: 'Ekonomi',
    position: 'Ekonomiassistent',
    manager: 'E005',
    scheduleTemplate: 'standard',
  },
  {
    id: 2,
    employeeId: 'E002',
    personnummer: '19760823-5678',
    firstName: 'Johan',
    lastName: 'Svensson',
    careOfAddress: '',
    streetAddress: 'Kungsgatan 10',
    postalCode: '11122',
    city: 'Stockholm',
    country: 'Sverige',
    phoneNumber: '070-234 56 78',
    email: 'johan.svensson@gmail.com',
    workEmail: 'johan.svensson@kontek.se',
    preferredEmail: 'work',
    status: 'active',
    role: 'employee',
    bankClearingNumber: '5678',
    bankAccountNumber: '987654321',
    bankBIC: '',
    bankCountryCode: 'SE',
    bankIBAN: '',
    department: 'Utveckling',
    position: 'Utvecklare',
    manager: 'E005',
    scheduleTemplate: 'standard',
  },
  {
    id: 3,
    employeeId: 'E003',
    personnummer: '19901130-9012',
    firstName: 'Maria',
    lastName: 'Larsson',
    careOfAddress: '',
    streetAddress: 'Vasagatan 15',
    postalCode: '41116',
    city: 'Göteborg',
    country: 'Sverige',
    phoneNumber: '070-345 67 89',
    email: 'maria.larsson@gmail.com',
    workEmail: 'maria.larsson@kontek.se',
    preferredEmail: 'personal',
    status: 'active',
    role: 'employee',
    bankClearingNumber: '9012',
    bankAccountNumber: '123789456',
    bankBIC: '',
    bankCountryCode: 'SE',
    bankIBAN: '',
    department: 'Design',
    position: 'UX Designer',
    manager: 'E005',
    scheduleTemplate: 'flexible',
  },
  {
    id: 4,
    employeeId: 'E004',
    personnummer: '19820405-3456',
    firstName: 'Patrik',
    lastName: 'Karlsson',
    careOfAddress: '',
    streetAddress: 'Drottninggatan 5',
    postalCode: '21134',
    city: 'Malmö',
    country: 'Sverige',
    phoneNumber: '070-456 78 90',
    email: 'patrik.karlsson@gmail.com',
    workEmail: 'patrik.karlsson@kontek.se',
    preferredEmail: 'work',
    status: 'active',
    role: 'employee',
    bankClearingNumber: '3456',
    bankAccountNumber: '987123654',
    bankBIC: '',
    bankCountryCode: 'SE',
    bankIBAN: '',
    department: 'Support',
    position: 'Supporttekniker',
    manager: 'E005',
    scheduleTemplate: 'standard',
  },
  {
    id: 5,
    employeeId: 'E005',
    personnummer: '19700215-7890',
    firstName: 'Mikael',
    lastName: 'Svensson',
    careOfAddress: '',
    streetAddress: 'Linnégatan 22',
    postalCode: '11447',
    city: 'Stockholm',
    country: 'Sverige',
    phoneNumber: '070-567 89 01',
    email: 'mikael.svensson@gmail.com',
    workEmail: 'mikael.svensson@kontek.se',
    preferredEmail: 'work',
    status: 'active',
    role: 'manager',
    bankClearingNumber: '7890',
    bankAccountNumber: '456789123',
    bankBIC: '',
    bankCountryCode: 'SE',
    bankIBAN: '',
    department: 'Ledning',
    position: 'Avdelningschef',
    manager: '',
    scheduleTemplate: 'manager',
  },
];

// Mock Schedules
export const mockSchedules: Schedule[] = [
  // Måndag
  {
    id: 1,
    employeeId: 'E001',
    date: getDateString(0), // Idag (måndag)
    startTime: '08:00:00',
    endTime: '17:00:00',
    breakStart: '12:00:00',
    breakEnd: '13:00:00',
    status: 'scheduled',
  },
  // Tisdag
  {
    id: 2,
    employeeId: 'E001',
    date: getDateString(1), // Tisdag
    startTime: '08:00:00',
    endTime: '17:00:00',
    breakStart: '12:00:00',
    breakEnd: '13:00:00',
    status: 'scheduled',
  },
  // Onsdag
  {
    id: 3,
    employeeId: 'E001',
    date: getDateString(2), // Onsdag
    startTime: '08:00:00',
    endTime: '17:00:00',
    breakStart: '12:00:00',
    breakEnd: '13:00:00',
    status: 'scheduled',
  },
  // Torsdag
  {
    id: 4,
    employeeId: 'E001',
    date: getDateString(3), // Torsdag
    startTime: '08:00:00',
    endTime: '17:00:00',
    breakStart: '12:00:00',
    breakEnd: '13:00:00',
    status: 'scheduled',
  },
  // Fredag
  {
    id: 5,
    employeeId: 'E001',
    date: getDateString(4), // Fredag
    startTime: '08:00:00',
    endTime: '17:00:00',
    breakStart: '12:00:00',
    breakEnd: '13:00:00',
    status: 'scheduled',
  },
];

// Hjälpfunktion för att få rätt datum
function getDateString(daysAhead: number): string {
  const date = new Date();
  date.setDate(date.getDate() + daysAhead);
  return date.toISOString().split('T')[0];
}

// Mock Time Codes
export const mockTimeCodes: TimeCode[] = [
  {
    id: 1,
    code: '200',
    name: 'Övertid 1 (mån-fre)',
    nameSV: 'Övertid 1 (mån-fre)',
    nameEN: 'Overtime 1 (Mon-Fri)',
    category: 'overtime',
    requiresApproval: true,
  },
  {
    id: 2,
    code: '210',
    name: 'Övertid 2 (lördag)',
    nameSV: 'Övertid 2 (lördag)',
    nameEN: 'Overtime 2 (Saturday)',
    category: 'overtime',
    requiresApproval: true,
  },
  {
    id: 3,
    code: '220',
    name: 'Övertid 3 (söndag, helgdag)',
    nameSV: 'Övertid 3 (söndag, helgdag)',
    nameEN: 'Overtime 3 (Sunday, Holiday)',
    category: 'overtime',
    requiresApproval: true,
  },
  {
    id: 4,
    code: '300',
    name: 'Sjukdom',
    nameSV: 'Sjukdom',
    nameEN: 'Sick Leave',
    category: 'sick',
    requiresApproval: true,
  },
  {
    id: 5,
    code: '400',
    name: 'Vård av barn (VAB)',
    nameSV: 'Vård av barn (VAB)',
    nameEN: 'Care of Child',
    category: 'vab',
    requiresApproval: true,
  },
  {
    id: 6,
    code: '500',
    name: 'Sen ankomst',
    nameSV: 'Sen ankomst',
    nameEN: 'Late Arrival',
    category: 'other',
    requiresApproval: true,
  },
  {
    id: 7,
    code: '510',
    name: 'Tidig avgång',
    nameSV: 'Tidig avgång',
    nameEN: 'Early Departure',
    category: 'other',
    requiresApproval: true,
  },
];

// Mock Deviations
export const mockDeviations: Deviation[] = [
  {
    id: 1,
    periodId: null,
    employeeId: 'E001',
    date: '2023-04-14',
    startTime: '17:00:00',
    endTime: '19:30:00',
    timeCode: '200',
    comment: 'Akut projektleverans',
    status: 'approved',
    managerComment: 'Godkänt',
    lastUpdated: new Date(),
    submitted: new Date(new Date().setDate(new Date().getDate() - 1)),
    approvedBy: 'E005',
    approvedAt: new Date(),
    rejectedBy: null,
    rejectedAt: null,
  },
  {
    id: 2,
    periodId: null,
    employeeId: 'E001',
    date: '2023-04-11',
    startTime: '08:00:00',
    endTime: '17:00:00',
    timeCode: '300',
    comment: 'Förkylning',
    status: 'returned',
    managerComment: 'Läkarintyg saknas',
    lastUpdated: new Date(),
    submitted: new Date(new Date().setDate(new Date().getDate() - 5)),
    approvedBy: null,
    approvedAt: null,
    rejectedBy: null,
    rejectedAt: null,
  },
  {
    id: 3,
    periodId: null,
    employeeId: 'E001',
    date: '2023-04-05',
    startTime: '08:00:00',
    endTime: '12:00:00',
    timeCode: '400',
    comment: 'Vård av sjukt barn',
    status: 'pending',
    managerComment: null,
    lastUpdated: new Date(),
    submitted: new Date(new Date().setDate(new Date().getDate() - 7)),
    approvedBy: null,
    approvedAt: null,
    rejectedBy: null,
    rejectedAt: null,
  },
  // Pending deviations for manager approval
  {
    id: 4,
    periodId: null,
    employeeId: 'E002',
    date: '2023-04-14',
    startTime: '17:00:00',
    endTime: '19:30:00',
    timeCode: '200',
    comment: 'Akut projektleverans för Kund AB',
    status: 'pending',
    managerComment: null,
    lastUpdated: new Date(),
    submitted: new Date(new Date().setDate(new Date().getDate() - 1)),
    approvedBy: null,
    approvedAt: null,
    rejectedBy: null,
    rejectedAt: null,
  },
  {
    id: 5,
    periodId: null,
    employeeId: 'E003',
    date: '2023-04-12',
    startTime: '08:00:00',
    endTime: '12:00:00',
    timeCode: '400',
    comment: 'Vård av sjukt barn',
    status: 'pending',
    managerComment: null,
    lastUpdated: new Date(),
    submitted: new Date(new Date().setDate(new Date().getDate() - 3)),
    approvedBy: null,
    approvedAt: null,
    rejectedBy: null,
    rejectedAt: null,
  },
  {
    id: 6,
    periodId: null,
    employeeId: 'E004',
    date: '2023-04-10',
    startTime: '08:00:00',
    endTime: '17:00:00',
    timeCode: '300',
    comment: 'Förkylning',
    status: 'pending',
    managerComment: null,
    lastUpdated: new Date(),
    submitted: new Date(new Date().setDate(new Date().getDate() - 5)),
    approvedBy: null,
    approvedAt: null,
    rejectedBy: null,
    rejectedAt: null,
  },
  {
    id: 7,
    periodId: null,
    employeeId: 'E001',
    date: '2023-04-01',
    startTime: '08:00:00',
    endTime: '10:00:00',
    timeCode: '500',
    comment: 'Försenad pga trafikstörningar',
    status: 'draft',
    managerComment: null,
    lastUpdated: new Date(),
    submitted: null,
    approvedBy: null,
    approvedAt: null,
    rejectedBy: null,
    rejectedAt: null,
  },
];

// Mock Leave Requests
export const mockLeaveRequests: LeaveRequest[] = [
  {
    id: 1,
    employeeId: 'E001',
    startDate: '2023-07-10',
    endDate: '2023-07-15',
    leaveType: 'vacation',
    scope: 'full-day',
    customStartTime: null,
    customEndTime: null,
    comment: 'Sommarsemester',
    status: 'pending',
    managerComment: null,
    lastUpdated: new Date(),
    submitted: new Date(new Date().setDate(new Date().getDate() - 2)),
    approvedBy: null,
    approvedAt: null,
    rejectedBy: null,
    rejectedAt: null,
    pausedBy: null,
    pausedAt: null,
    pauseReason: null,
  },
  {
    id: 2,
    employeeId: 'E001',
    startDate: '2023-05-26',
    endDate: '2023-05-26',
    leaveType: 'comp-leave',
    scope: 'afternoon',
    customStartTime: null,
    customEndTime: null,
    comment: 'Läkarbesök',
    status: 'approved',
    managerComment: 'Godkänt',
    lastUpdated: new Date(),
    submitted: new Date(new Date().setDate(new Date().getDate() - 10)),
    approvedBy: 'E005',
    approvedAt: new Date(new Date().setDate(new Date().getDate() - 9)),
    rejectedBy: null,
    rejectedAt: null,
    pausedBy: null,
    pausedAt: null,
    pauseReason: null,
  },
  // Leave requests for manager approval
  {
    id: 3,
    employeeId: 'E002',
    startDate: '2023-06-19',
    endDate: '2023-06-30',
    leaveType: 'vacation',
    scope: 'full-day',
    customStartTime: null,
    customEndTime: null,
    comment: 'Sommarsemester',
    status: 'pending',
    managerComment: null,
    lastUpdated: new Date(),
    submitted: new Date(new Date().setDate(new Date().getDate() - 5)),
    approvedBy: null,
    approvedAt: null,
    rejectedBy: null,
    rejectedAt: null,
    pausedBy: null,
    pausedAt: null,
    pauseReason: null,
  },
  {
    id: 4,
    employeeId: 'E003',
    startDate: '2023-05-15',
    endDate: '2023-05-15',
    leaveType: 'comp-leave',
    scope: 'morning',
    customStartTime: null,
    customEndTime: null,
    comment: 'Läkarbesök',
    status: 'pending',
    managerComment: null,
    lastUpdated: new Date(),
    submitted: new Date(new Date().setDate(new Date().getDate() - 3)),
    approvedBy: null,
    approvedAt: null,
    rejectedBy: null,
    rejectedAt: null,
    pausedBy: null,
    pausedAt: null,
    pauseReason: null,
  },
];

// Mock Time Balances
export const mockTimeBalances: TimeBalance[] = [
  {
    id: 1,
    employeeId: 'E001',
    timeBalance: 270, // 4.5 hours in minutes
    vacationDays: 20,
    savedVacationDays: {
      '2022': 5,
      '2021': 0,
      '2020': 0,
      '2019': 0,
      '2018': 0,
      '2017': 0
    },
    vacationUnit: 'days',
    compensationTime: 120, // 2 hours in minutes
    lastUpdated: new Date(),
  },
  {
    id: 2,
    employeeId: 'E002',
    timeBalance: 180, // 3 hours in minutes
    vacationDays: 25,
    savedVacationDays: {
      '2022': 3,
      '2021': 2,
      '2020': 0,
      '2019': 0,
      '2018': 0,
      '2017': 0
    },
    vacationUnit: 'days',
    compensationTime: 0,
    lastUpdated: new Date(),
  },
  {
    id: 3,
    employeeId: 'E003',
    timeBalance: -60, // -1 hour in minutes
    vacationDays: 15,
    savedVacationDays: {
      '2022': 0,
      '2021': 0,
      '2020': 0,
      '2019': 0,
      '2018': 0,
      '2017': 0
    },
    vacationUnit: 'days',
    compensationTime: 60, // 1 hour in minutes
    lastUpdated: new Date(),
  },
  {
    id: 4,
    employeeId: 'E004',
    timeBalance: 120, // 2 hours in minutes
    vacationDays: 22,
    savedVacationDays: {
      '2022': 2,
      '2021': 1,
      '2020': 0,
      '2019': 0,
      '2018': 0,
      '2017': 0
    },
    vacationUnit: 'days',
    compensationTime: 0,
    lastUpdated: new Date(),
  },
  {
    id: 5,
    employeeId: 'E005',
    timeBalance: 0,
    vacationDays: 30,
    savedVacationDays: {
      '2022': 5,
      '2021': 5,
      '2020': 0,
      '2019': 0,
      '2018': 0,
      '2017': 0
    },
    vacationUnit: 'days',
    compensationTime: 0,
    lastUpdated: new Date(),
  },
];

// Mock Payslips
export const mockPayslips: Payslip[] = [
  {
    id: 1,
    employeeId: 'E001',
    year: 2023,
    month: 3,
    payDate: '2023-03-25',
    grossAmount: 4500000, // 45,000 SEK
    netAmount: 3600000,   // 36,000 SEK
    status: 'viewed',
    fileName: 'lonespec_2023_03_E001.pdf',
    fileUrl: '/api/payslips/file/1',
    published: new Date(2023, 2, 25),
    viewed: true,
    viewedAt: new Date(2023, 2, 26),
  },
  {
    id: 2,
    employeeId: 'E001',
    year: 2023,
    month: 2,
    payDate: '2023-02-25',
    grossAmount: 4450000, // 44,500 SEK
    netAmount: 3550000,   // 35,500 SEK
    status: 'viewed',
    fileName: 'lonespec_2023_02_E001.pdf',
    fileUrl: '/api/payslips/file/2',
    published: new Date(2023, 1, 25),
    viewed: true,
    viewedAt: new Date(2023, 1, 26),
  },
  {
    id: 3,
    employeeId: 'E001',
    year: 2023,
    month: 1,
    payDate: '2023-01-25',
    grossAmount: 4480000, // 44,800 SEK
    netAmount: 3580000,   // 35,800 SEK
    status: 'viewed',
    fileName: 'lonespec_2023_01_E001.pdf',
    fileUrl: '/api/payslips/file/3',
    published: new Date(2023, 0, 25),
    viewed: true,
    viewedAt: new Date(2023, 0, 26),
  },
  {
    id: 4,
    employeeId: 'E001',
    year: 2022,
    month: 12,
    payDate: '2022-12-22', // Earlier due to holidays
    grossAmount: 4480000, // 44,800 SEK
    netAmount: 3580000,   // 35,800 SEK
    status: 'viewed',
    fileName: 'lonespec_2022_12_E001.pdf',
    fileUrl: '/api/payslips/file/4',
    published: new Date(2022, 11, 22),
    viewed: true,
    viewedAt: new Date(2022, 11, 23),
  },
  {
    id: 5,
    employeeId: 'E001',
    year: 2022,
    month: 11,
    payDate: '2022-11-25',
    grossAmount: 4380000, // 43,800 SEK
    netAmount: 3500000,   // 35,000 SEK
    status: 'viewed',
    fileName: 'lonespec_2022_11_E001.pdf',
    fileUrl: '/api/payslips/file/5',
    published: new Date(2022, 10, 25),
    viewed: true,
    viewedAt: new Date(2022, 10, 26),
  },
];

// Mock Activity Logs
export const mockActivityLogs: ActivityLog[] = [
  {
    id: 1,
    employeeId: 'E001',
    type: 'deviation',
    action: 'approved',
    description: 'Din övertidsansökan för 12 april har godkänts av Mikael Svensson',
    timestamp: new Date(),
    referenceId: '1',
    referenceType: 'deviation',
    performedBy: null,
  },
  {
    id: 2,
    employeeId: 'E001',
    type: 'leave',
    action: 'created',
    description: 'Du ansökte om semester 10-15 juli',
    timestamp: new Date(new Date().setDate(new Date().getDate() - 1)),
    referenceId: '1',
    referenceType: 'leave',
    performedBy: null,
  },
  {
    id: 3,
    employeeId: 'E001',
    type: 'deviation',
    action: 'returned',
    description: 'Mikael har skickat tillbaka din avvikelserapport för 11 april med kommentar',
    timestamp: new Date(new Date().setDate(new Date().getDate() - 2)),
    referenceId: '2',
    referenceType: 'deviation',
    performedBy: null,
  },
  {
    id: 4,
    employeeId: 'E001',
    type: 'payslip',
    action: 'published',
    description: 'Ny lönespecifikation för mars 2023 finns tillgänglig',
    timestamp: new Date(new Date().setDate(new Date().getDate() - 5)),
    referenceId: '1',
    referenceType: 'payslip',
    performedBy: null,
  },
  {
    id: 5,
    employeeId: 'E001',
    type: 'leave',
    action: 'approved',
    description: 'Din ledighetsansökan för 26 maj har godkänts',
    timestamp: new Date(new Date().setDate(new Date().getDate() - 9)),
    referenceId: '2',
    referenceType: 'leave',
    performedBy: null,
  },
];

// Get the current employee (for development)
export const getCurrentEmployee = () => mockEmployees[0];

// Get pending approvals count (for manager dashboard)
export const getPendingApprovalsCount = () => {
  const pendingDeviations = mockDeviations.filter(d => d.status === 'pending').length;
  const pendingLeaveRequests = mockLeaveRequests.filter(l => l.status === 'pending').length;
  return pendingDeviations + pendingLeaveRequests;
};
