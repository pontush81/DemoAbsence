Här kommer den kompletta och förfinade specifikationen du kan använda i Replit, Notion eller för att briefa ett utvecklingsteam:

⸻

📱 Avvikelseapp – Registrering & attestering av schemaavvikelser

🎯 Syfte

Skapa en responsiv webbapp (PWA-liknande) för medarbetare och chefer som hanterar:
	•	Avvikelser i arbetsschema
	•	Ledighetsansökningar
	•	Attestflöden
	•	Integration med Kontek Löns öppna API

Appen ska byggas med återanvändbar kodstruktur för vidareutveckling till iOS-app (t.ex. React Native).

⸻

🧑‍💻 Roller & användarflöden

👤 Medarbetare
	•	Se eget schema och tidssaldon (hämtas via API).
	•	Registrera avvikelser med tidkod + valfri kommentar.
	•	Se tidigare registrerade avvikelser och status.
	•	Lägga till egna kommentarer som kan läsas av chef.
	•	Ansöka om ledighet (en dag eller flera).
	•	Se publicerade lönespecifikationer (PDF via API).
	•	Ändra egna uppgifter (adress, bankkonto etc.) – skickas till Kontek efter godkännande.
	•	Välja språk: Svenska / Engelska (lokal inställning).

👨‍💼 Chef / Attesterande chef
	•	Se avvikelser att attestera.
	•	Påminna medarbetare manuellt (förutom automatpåminnelser).
	•	Kommentera eller skicka tillbaka avvikelse för rättning.
	•	Hantera ledighetsansökningar: godkänn / pausa / avslå med kommentar.
	•	Appen föreslår automatiskt rätt tidkod vid godkänd ledighet.

⸻

🔐 Autentisering

OBS: Implementeras i senare steg.
Tills vidare används fiktiv inloggning med lokalt lagrade användarroller.

⸻

🔌 Integration mot Kontek Lön API

Appen ska hämta/skicka data från Kontek Löns öppna API (se bifogad dokumentation).
Version 5 föredras då den tillåter deluppdatering av personaldata.

Viktiga endpoints (att mockas i fas 1):
	•	GET /person: Personaluppgifter
	•	GET /schedule: Arbetsschema
	•	GET /timecodes: Tidkoder för avvikelser
	•	GET /wage-specs: Lönespecifikationer (PDF)
	•	POST /deviations: Ny avvikelse
	•	POST /leave-requests: Ledighetsansökan
	•	PUT /person/{id}: Uppdatering av personuppgifter

⸻

🧪 Mockade API-anrop (fas 1)

Då vi ännu inte har autentiseringsuppgifter ska alla API-anrop mockas.

Regler för mock:
	•	JSON-filer med realistisk struktur enligt API-dokumentation.
	•	Lagra mockdata i /mock-data eller /fixtures.
	•	Skapa en apiService.ts/apiService.js som imiterar riktiga anrop.
	•	Märk mockad kod med // MOCKED.
	•	Simulera rollinloggning med fiktiva användarobjekt i localStorage.

⸻

🧭 Navigering & Meny
	•	Startsida (Dashboard): Visa status på egna registreringar & notiser.
	•	Avvikelse: Registrering och historik.
	•	Ledighet: Ansökningar och status.
	•	Lönespecifikationer: Lista med publicerade PDF:er.
	•	Inställningar: Språkval, redigera personuppgifter.
	•	Chef-vy (visas för chefer):
	•	Attestera avvikelser
	•	Behandla ledighetsansökningar
	•	Påminn / kommentera

⸻

🧪 Framtida funktion: Resa & Utlägg
	•	Menyalternativ: Resa & Utlägg ska synas i sidomenyn.
	•	Funktionen behöver inte implementeras nu.
	•	Feature toggle ska finnas (aktivera/inaktivera via t.ex. config.ts eller miljövariabel).

⸻

🎨 Design och färger

Inspireras av Kontek Löns färgschema enligt bifogad bild:
	•	Primär färg: Grön (används för positiva statusar, knappar)
	•	Sekundär: Mörkgrå/svart text
	•	CTA-knappar: Orange/rödton (ex: skicka, godkänn)
	•	Bakgrund: Ljusgrå/vit
	•	Teckensnitt: Sans-serif, lättläst och mobilanpassat

⸻

⚙️ Teknisk stack (förslag)

Lager	Teknik
Frontend	React + TypeScript
UI-ramverk	Tailwind CSS
Routing	React Router / Next.js
State	Zustand eller Context API
i18n	react-i18next
Mockdata	Lokala JSON-filer
Feature flags	Enkel lokal flag/LaunchDarkly
Deployment	Replit (lokalt) / Vercel (moln)


⸻

Vill du att jag skapar en filstruktur + apiService.ts och exempel på mockdata i nästa steg?