import { test, expect } from '@playwright/test';

test.describe('üé• ULTRA-ENKEL DEMO - Visar appen i aktion', () => {
  
  test('üì∫ Visar hela appen och g√∂r grundl√§ggande anv√§ndarinteraktion', async ({ page }) => {
    console.log('üé¨ === STARTAR ULTRA-ENKEL DEMO ===');
    
    // G√• till appen
    console.log('üåê Laddar appen...');
    await page.goto('http://localhost:3000');
    await page.waitForLoadState('networkidle');
    await page.waitForTimeout(3000);
    
    console.log('üì± Appen laddad! Visar huvudsidan...');
    
    // V√§nta n√•gra sekunder f√∂r att visa appen
    await page.waitForTimeout(3000);
    
    // Kolla om det finns anv√§ndarinfo
    console.log('üë§ Kollar om vi ser anv√§ndare...');
    const userElements = await page.locator('text=Anna, text=Erik, .user-name, [data-testid*="user"]').count();
    console.log(`üë• Hittade ${userElements} anv√§ndarelement`);
    
    // Scrolla lite f√∂r att visa inneh√•ll
    console.log('üìú Scrollar f√∂r att visa inneh√•ll...');
    await page.evaluate(() => window.scrollTo(0, 200));
    await page.waitForTimeout(2000);
    
    await page.evaluate(() => window.scrollTo(0, 0));
    await page.waitForTimeout(2000);
    
    // F√∂rs√∂k hover p√• olika element
    console.log('üñ±Ô∏è R√∂r mig runt i UI:t...');
    const hoverTargets = await page.locator('button, a, .card, [role="button"]').all();
    
    for (let i = 0; i < Math.min(3, hoverTargets.length); i++) {
      try {
        await hoverTargets[i].hover();
        await page.waitForTimeout(1000);
      } catch (e) {
        console.log(`‚ö†Ô∏è Kunde inte hovra p√• element ${i}`);
      }
    }
    
    // F√∂rs√∂k klicka p√• s√§kra saker
    console.log('üéØ F√∂rs√∂ker hitta s√§kra klickbara element...');
    
    // Mobil-menu knapp (om den finns)
    const mobileMenuButton = page.locator('button[aria-label*="menu"], button:has-text("‚ò∞"), [data-testid="mobile-menu"]').first();
    if (await mobileMenuButton.count() > 0) {
      console.log('üì± √ñppnar mobilmeny...');
      try {
        await mobileMenuButton.click();
        await page.waitForTimeout(2000);
        
        // St√§ng den igen
        await mobileMenuButton.click();
        await page.waitForTimeout(2000);
      } catch (e) {
        console.log('‚ö†Ô∏è Mobilmeny fungerade inte');
      }
    }
    
    // Dropdown eller select
    const dropdowns = page.locator('select, [role="combobox"], .dropdown-trigger').first();
    if (await dropdowns.count() > 0) {
      console.log('üìã Interagerar med dropdown...');
      try {
        await dropdowns.click();
        await page.waitForTimeout(2000);
        
        // Klicka n√•gon annanstans f√∂r att st√§nga
        await page.click('body');
        await page.waitForTimeout(1000);
      } catch (e) {
        console.log('‚ö†Ô∏è Dropdown fungerade inte');
      }
    }
    
    // Visa att sidan √§r interaktiv
    console.log('‚ú® Visar att sidan √§r levande och interaktiv...');
    await page.mouse.move(100, 100);
    await page.waitForTimeout(500);
    await page.mouse.move(200, 200);
    await page.waitForTimeout(500);
    await page.mouse.move(300, 300);
    await page.waitForTimeout(1000);
    
    console.log('üéâ Demo slutf√∂rd! Videor borde visa riktig anv√§ndarinteraktion nu.');
    
    // Bara kolla att sidan finns
    await expect(page).toHaveURL(/localhost:3000/);
  });
  
});